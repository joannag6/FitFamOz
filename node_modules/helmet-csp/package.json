{
  "_args": [
    [
      {
        "raw": "helmet-csp@1.2.2",
        "scope": null,
        "escapedName": "helmet-csp",
        "name": "helmet-csp",
        "rawSpec": "1.2.2",
        "spec": "1.2.2",
        "type": "version"
      },
      "/Users/banana/Desktop/UNIMELB/Y3/S1/WIT/ASSIGNMENTS/code/FitFamOz/node_modules/helmet"
    ]
  ],
  "_from": "helmet-csp@1.2.2",
  "_id": "helmet-csp@1.2.2",
  "_inCache": true,
  "_location": "/helmet-csp",
  "_nodeVersion": "6.3.1",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/helmet-csp-1.2.2.tgz_1469644189225_0.2846507737413049"
  },
  "_npmUser": {
    "name": "evanhahn",
    "email": "me@evanhahn.com"
  },
  "_npmVersion": "3.10.6",
  "_phantomChildren": {},
  "_requested": {
    "raw": "helmet-csp@1.2.2",
    "scope": null,
    "escapedName": "helmet-csp",
    "name": "helmet-csp",
    "rawSpec": "1.2.2",
    "spec": "1.2.2",
    "type": "version"
  },
  "_requiredBy": [
    "/helmet"
  ],
  "_resolved": "https://registry.npmjs.org/helmet-csp/-/helmet-csp-1.2.2.tgz",
  "_shasum": "085c0307d57fc96cd97337f170ab8bfea99e5df7",
  "_shrinkwrap": null,
  "_spec": "helmet-csp@1.2.2",
  "_where": "/Users/banana/Desktop/UNIMELB/Y3/S1/WIT/ASSIGNMENTS/code/FitFamOz/node_modules/helmet",
  "author": {
    "name": "Adam Baldwin",
    "email": "baldwin@andyet.net",
    "url": "http://andyet.net/team/baldwin"
  },
  "bugs": {
    "url": "https://github.com/helmetjs/csp/issues"
  },
  "contributors": [
    {
      "name": "Evan Hahn",
      "email": "me@evanhahn.com",
      "url": "http://evanhahn.com"
    },
    {
      "name": "Ryan Cannon",
      "email": "ryan@ryancannon.com",
      "url": "https://ryancannon.com"
    }
  ],
  "dependencies": {
    "camelize": "1.0.0",
    "content-security-policy-builder": "1.0.0",
    "lodash.reduce": "4.5.0",
    "platform": "1.3.1"
  },
  "description": "Content Security Policy middleware.",
  "devDependencies": {
    "content-security-policy-parser": "^0.1.0",
    "express": "^4.13.4",
    "lodash": "^4.13.1",
    "mocha": "^2.5.3",
    "standard": "^7.1.0",
    "supertest": "^1.2.0"
  },
  "directories": {},
  "dist": {
    "shasum": "085c0307d57fc96cd97337f170ab8bfea99e5df7",
    "tarball": "https://registry.npmjs.org/helmet-csp/-/helmet-csp-1.2.2.tgz"
  },
  "gitHead": "1bb0981ed93a981d63c66d667cba0bb0136215cb",
  "homepage": "https://github.com/helmetjs/csp#readme",
  "keywords": [
    "helmet",
    "security",
    "express",
    "connect",
    "content",
    "security",
    "policy",
    "csp",
    "xss"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "evanhahn",
      "email": "me@evanhahn.com"
    }
  ],
  "name": "helmet-csp",
  "optionalDependencies": {},
  "readme": "Content Security Policy middleware\n==================================\n[![Build Status](https://travis-ci.org/helmetjs/csp.svg?branch=master)](https://travis-ci.org/helmetjs/csp)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](http://standardjs.com/)\n\n[_Looking for a changelog?_](https://github.com/helmetjs/helmet/blob/master/HISTORY.md)\n\nContent Security Policy helps prevent unwanted content being injected into your webpages; this can mitigate XSS vulnerabilities, unintended frames, malicious frames, and more. If you want to learn how CSP works, check out the fantastic [HTML5 Rocks guide](http://www.html5rocks.com/en/tutorials/security/content-security-policy/), the [Content Security Policy Reference](http://content-security-policy.com/), and the [Content Security Policy specification](http://www.w3.org/TR/CSP/). This module helps set Content Security Policies.\n\nUsage:\n\n```javascript\nvar csp = require('helmet-csp')\n\napp.use(csp({\n  // Specify directives as normal.\n  directives: {\n    defaultSrc: [\"'self'\", 'default.com'],\n    scriptSrc: [\"'self'\", \"'unsafe-inline'\"],\n    styleSrc: ['style.com'],\n    imgSrc: ['img.com', 'data:'],\n    sandbox: ['allow-forms', 'allow-scripts'],\n    reportUri: '/report-violation',\n\n    objectSrc: [], // An empty array allows nothing through\n  },\n\n  // Set to true if you only want browsers to report errors, not block them.\n  // You may also set this to a function(req, res) in order to decide dynamically\n  // whether to use reportOnly mode, e.g., to allow for a dynamic kill switch.\n  reportOnly: false,\n\n  // Set to true if you want to blindly set all headers: Content-Security-Policy,\n  // X-WebKit-CSP, and X-Content-Security-Policy.\n  setAllHeaders: false,\n\n  // Set to true if you want to disable CSP on Android where it can be buggy.\n  disableAndroid: false,\n\n  // Set to false if you want to completely disable any user-agent sniffing.\n  // This may make the headers less compatible but it will be much faster.\n  // This defaults to `true`.\n  browserSniff: true\n}))\n```\n\nThere are a lot of inconsistencies in how browsers implement CSP. Helmet sniffs the user-agent of the browser and sets the appropriate header and value for that browser. If no user-agent is matched, it will set _all_ the headers with the 2.0 spec.\n\nHandling CSP violations\n-----------------------\n\nIf you've specified a `reportUri`, browsers will POST any CSP violations to your server. Here's a simple example of a route that handles those reports:\n\n```js\n// You need a JSON parser first.\napp.use(bodyParser.json({\n  type: ['json', 'application/csp-report']\n}))\n\napp.post('/report-violation', function (req, res) {\n  if (req.body) {\n    console.log('CSP Violation: ', req.body)\n  } else {\n    console.log('CSP Violation: No data received!')\n  }\n  res.status(204).end()\n})\n```\n\nNot all browsers send CSP violations in the same way, so this might require a little work.\n\n*Note*: If you're using a CSRF module like [csurf](https://github.com/expressjs/csurf), you might have problems handling these violations without a valid CSRF token. The fix is to put your CSP report route *above* csurf middleware.\n\nGenerating nonces\n-----------------\n\nYou can dynamically generate nonces to allow inline `<script>` tags to be safely evaluated. Here's a simple example:\n\n```js\nvar uuid = require('node-uuid')\n\napp.use(function (req, res, next) {\n  res.locals.nonce = uuid.v4()\n  next()\n})\n\napp.use(csp({\n  directives: {\n    scriptSrc: [\n      \"'self'\",\n      function (req, res) {\n        return \"'nonce-\" + res.locals.nonce + \"'\"  // 'nonce-614d9122-d5b0-4760-aecf-3a5d17cf0ac9'\n      }\n    ]\n  }\n}))\n\napp.use(function (req, res) {\n  res.end('<script nonce=\"' + res.locals.nonce + '\">alert(1 + 1);</script>')\n})\n```\n\nUsing CSP with a CDN\n--------------------\n\nThe default behavior of CSP is generate headers tailored for the browser that's requesting your page. If you have a CDN in front of your application, the CDN may cache the wrong headers, rendering your CSP useless. Make sure to eschew a CDN when using this module or set the `browserSniff` option to `false`.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/helmetjs/csp.git"
  },
  "scripts": {
    "pretest": "standard",
    "test": "mocha"
  },
  "standard": {
    "globals": [
      "describe",
      "beforeEach",
      "it"
    ]
  },
  "version": "1.2.2"
}
