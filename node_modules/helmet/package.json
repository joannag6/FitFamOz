{
  "_args": [
    [
      {
        "raw": "helmet@~2.3.0",
        "scope": null,
        "escapedName": "helmet",
        "name": "helmet",
        "rawSpec": "~2.3.0",
        "spec": ">=2.3.0 <2.4.0",
        "type": "range"
      },
      "/Users/banana/Desktop/UNIMELB/Y3/S1/WIT/ASSIGNMENTS/code/FitFamOz"
    ]
  ],
  "_from": "helmet@>=2.3.0 <2.4.0",
  "_id": "helmet@2.3.0",
  "_inCache": true,
  "_location": "/helmet",
  "_nodeVersion": "6.7.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/helmet-2.3.0.tgz_1475275979265_0.7096879319287837"
  },
  "_npmUser": {
    "name": "evanhahn",
    "email": "me@evanhahn.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "helmet@~2.3.0",
    "scope": null,
    "escapedName": "helmet",
    "name": "helmet",
    "rawSpec": "~2.3.0",
    "spec": ">=2.3.0 <2.4.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/helmet/-/helmet-2.3.0.tgz",
  "_shasum": "d655c85b55b0a3bf722a4c2c66e48b78b4161b91",
  "_shrinkwrap": null,
  "_spec": "helmet@~2.3.0",
  "_where": "/Users/banana/Desktop/UNIMELB/Y3/S1/WIT/ASSIGNMENTS/code/FitFamOz",
  "author": {
    "name": "Adam Baldwin",
    "email": "baldwin@andyet.net",
    "url": "http://andyet.net/team/baldwin"
  },
  "bugs": {
    "url": "https://github.com/helmetjs/helmet/issues"
  },
  "contributors": [
    {
      "name": "Evan Hahn",
      "email": "me@evanhahn.com",
      "url": "http://evanhahn.com"
    }
  ],
  "dependencies": {
    "connect": "3.4.1",
    "dns-prefetch-control": "0.1.0",
    "dont-sniff-mimetype": "1.0.0",
    "frameguard": "2.0.0",
    "helmet-csp": "1.2.2",
    "hide-powered-by": "1.0.0",
    "hpkp": "1.2.0",
    "hsts": "1.0.0",
    "ienoopen": "1.0.0",
    "nocache": "1.0.1",
    "referrer-policy": "1.0.0",
    "x-xss-protection": "1.0.0"
  },
  "description": "help secure Express/Connect apps with various HTTP headers",
  "devDependencies": {
    "mocha": "^2.4.5",
    "sinon": "^1.17.3",
    "standard": "^7.1.0"
  },
  "directories": {},
  "dist": {
    "shasum": "d655c85b55b0a3bf722a4c2c66e48b78b4161b91",
    "tarball": "https://registry.npmjs.org/helmet/-/helmet-2.3.0.tgz"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "gitHead": "f694279774150bce7fe2d39b08dae786fdd91adc",
  "homepage": "https://github.com/helmetjs/helmet#readme",
  "keywords": [
    "security",
    "headers",
    "express",
    "connect",
    "x-frame-options",
    "x-powered-by",
    "csp",
    "hsts",
    "clickjack"
  ],
  "license": "MIT",
  "main": "index",
  "maintainers": [
    {
      "name": "adam_baldwin",
      "email": "baldwin@andyet.net"
    },
    {
      "name": "evanhahn",
      "email": "me@evanhahn.com"
    }
  ],
  "name": "helmet",
  "optionalDependencies": {},
  "readme": "Helmet\n======\n[![Gitter chat](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/helmetjs/helmet)\n[![npm version](https://badge.fury.io/js/helmet.svg)](http://badge.fury.io/js/helmet)\n[![npm dependency status](https://david-dm.org/helmetjs/helmet.svg)](https://david-dm.org/helmetjs/helmet)\n[![Build Status](https://travis-ci.org/helmetjs/helmet.svg?branch=master)](https://travis-ci.org/helmetjs/helmet)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](http://standardjs.com/)\n\nHelmet helps you secure your Express apps by setting various HTTP headers. *It's not a silver bullet*, but it can help!\n\n[Looking for a version of Helmet that supports the Koa framework?](https://github.com/venables/koa-helmet)\n\nQuick start\n-----------\n\nFirst, run `npm install helmet --save` for your app. Then, in an Express (or Connect) app:\n\n```js\nvar express = require('express')\nvar helmet = require('helmet')\n\nvar app = express()\n\napp.use(helmet())\n\n// ...\n```\n\nYou can also use its pieces individually:\n\n```js\napp.use(helmet.noCache())\napp.use(helmet.frameguard())\n```\n\n*If you're using Express 3, make sure these middlewares are listed before `app.router`.*\n\nHow it works\n------------\n\nHelmet is a collection of 11 smaller middleware functions that set HTTP headers. Running `app.use(helmet())` will not include all of these middleware functions by default.\n\n| Module | Default? |\n|---|---|\n| [contentSecurityPolicy](https://github.com/helmetjs/csp) for setting Content Security Policy |  |\n| [dnsPrefetchControl](https://github.com/helmetjs/dns-prefetch-control) controls browser DNS prefetching | ✓ |\n| [frameguard](https://github.com/helmetjs/frameguard) to prevent clickjacking | ✓ |\n| [hidePoweredBy](https://github.com/helmetjs/hide-powered-by) to remove the X-Powered-By header | ✓ |\n| [hpkp](https://github.com/helmetjs/hpkp) for HTTP Public Key Pinning |  |\n| [hsts](https://github.com/helmetjs/hsts) for HTTP Strict Transport Security | ✓ |\n| [ieNoOpen](https://github.com/helmetjs/ienoopen) sets X-Download-Options for IE8+ | ✓ |\n| [noCache](https://github.com/helmetjs/nocache) to disable client-side caching |  |\n| [noSniff](https://github.com/helmetjs/dont-sniff-mimetype) to keep clients from sniffing the MIME type | ✓ |\n| [referrerPolicy](https://github.com/helmetjs/referrer-policy) to hide the Referer header |  |\n| [xssFilter](https://github.com/helmetjs/x-xss-protection) adds some small XSS protections | ✓ |\n\nYou can also use each module individually as documented below.\n\nUsage guide\n-----------\n\nFor each of the middlewares, we'll talk about three things:\n\n1. What's the attack we're trying to prevent?\n2. How do we use Helmet to help mitigate those issues?\n3. What are the non-obvious limitations of this middleware?\n\nLet's get started.\n\n### Top-level: helmet\n\nThe top-level `helmet` package will include 7 of the following 11 packages. You can use it like this:\n\n```js\napp.use(helmet())\n```\n\nYou can disable a middleware that's normally enabled by default. This will disable `frameguard` but include the other 6 defaults.\n\n```js\napp.use(helmet({\n  frameguard: false\n}))\n```\n\nYou can also set options for a middleware. Setting options like this will *always* include the middleware, whether or not it's a default.\n\n```js\napp.use(helmet({\n  frameguard: {\n    action: 'deny'\n  }\n}))\n```\n\n### Content Security Policy: contentSecurityPolicy\n\n**Trying to prevent:** Injecting anything unintended into our page. That could cause XSS vulnerabilities, unintended tracking, malicious frames, and more.\n\n**How to use Helmet to mitigate this:** Set an appropriate Content Security Policy. If you want to learn how CSP works, check out the fantastic [HTML5 Rocks guide](http://www.html5rocks.com/en/tutorials/security/content-security-policy/) and the [Content Security Policy Reference](http://content-security-policy.com/).\n\nUsage:\n\n```javascript\napp.use(helmet.contentSecurityPolicy({\n  // Specify directives as normal.\n  directives: {\n    defaultSrc: [\"'self'\", 'default.com'],\n    scriptSrc: [\"'self'\", \"'unsafe-inline'\"],\n    styleSrc: ['style.com'],\n    imgSrc: ['img.com', 'data:'],\n    sandbox: ['allow-forms', 'allow-scripts'],\n    reportUri: '/report-violation',\n    objectSrc: [] // An empty array allows nothing through\n  },\n\n  // Set to true if you only want browsers to report errors, not block them\n  reportOnly: false,\n\n  // Set to true if you want to blindly set all headers: Content-Security-Policy,\n  // X-WebKit-CSP, and X-Content-Security-Policy.\n  setAllHeaders: false,\n\n  // Set to true if you want to disable CSP on Android where it can be buggy.\n  disableAndroid: false,\n\n  // Set to false if you want to completely disable any user-agent sniffing.\n  // This may make the headers less compatible but it will be much faster.\n  // This defaults to `true`.\n  browserSniff: true\n}))\n```\n\nYou can specify keys in a camel-cased fashion (`imgSrc`) or dashed (`img-src`); they are equivalent.\n\nThere are a lot of inconsistencies in how browsers implement CSP. Helmet sniffs the user-agent of the browser and sets the appropriate header and value for that browser. If no user-agent is matched, it will set _all_ the headers with the latest spec.\n\n*Note*: If you're using the `reportUri` feature and you're using [csurf](https://github.com/expressjs/csurf), you might have errors. [Check this out](https://github.com/expressjs/csurf/issues/20) for a workaround.\n\n**Limitations:** CSP is often difficult to tune properly, as it's a whitelist and not a blacklist. It isn't supported on old browsers but is [pretty well-supported](http://caniuse.com/#feat=contentsecuritypolicy) on newer browsers.\n\n### XSS Filter: xssFilter\n\n**Trying to prevent:** Cross-site scripting attacks (XSS), a subset of the attacks mentioned above.\n\n**How to use Helmet to mitigate this:** The `X-XSS-Protection` HTTP header is a basic protection against XSS. It was originally [by Microsoft](http://blogs.msdn.com/b/ieinternals/archive/2011/01/31/controlling-the-internet-explorer-xss-filter-with-the-x-xss-protection-http-header.aspx) but Chrome has since adopted it as well. Helmet lets you use it easily:\n\n```javascript\napp.use(helmet.xssFilter())\n```\n\nThis sets the `X-XSS-Protection` header. On modern browsers, it will set the value to `1; mode=block`. On old versions of Internet Explorer, this creates a vulnerability (see [here](http://hackademix.net/2009/11/21/ies-xss-filter-creates-xss-vulnerabilities/) and [here](http://technet.microsoft.com/en-us/security/bulletin/MS10-002)), and so the header is set to `0` to disable it. To force the header on all versions of IE, add the option:\n\n```javascript\napp.use(helmet.xssFilter({ setOnOldIE: true }))\n// This has some security problems for old IE!\n```\n\n**Limitations:** This isn't anywhere near as thorough as CSP. It's only properly supported on IE9+ and Chrome; no other major browsers support it at this time. Old versions of IE support it in a buggy way, which we disable by default.\n\n### Frame options: frameguard\n\n**Trying to prevent:** Your page being put in a `<frame>` or `<iframe>` without your consent. This can result in [clickjacking attacks](https://en.wikipedia.org/wiki/Clickjacking), among other things.\n\n**How to use Helmet to mitigate this:** The `X-Frame-Options` HTTP header restricts who can put your site in a frame which can help mitigate things like [clickjacking attacks](https://en.wikipedia.org/wiki/Clickjacking). It has three modes: `DENY`, `SAMEORIGIN`, and `ALLOW-FROM`, defaulting to `SAMEORIGIN`. If your app does not need to be framed (and most don't) you can use `DENY`. If your site can be in frames from the same origin, you can set it to `SAMEORIGIN`. If you want to allow it from a specific URL, you can allow that with `ALLOW-FROM` and a URL.\n\nUsage:\n\n```javascript\n// Don't allow me to be in ANY frames:\napp.use(helmet.frameguard({ action: 'deny' }))\n\n// Only let me be framed by people of the same origin:\napp.use(helmet.frameguard({ action: 'sameorigin' }))\napp.use(helmet.frameguard())  // defaults to sameorigin\n\n// Allow from a specific host:\napp.use(helmet.frameguard({\n  action: 'allow-from',\n  domain: 'http://example.com'\n}))\n```\n\n**Limitations:** This has pretty good (but not 100%) browser support: IE8+, Opera 10.50+, Safari 4+, Chrome 4.1+, and Firefox 3.6.9+. It only prevents against a certain class of attack, but does so pretty well. It also prevents your site from being framed, which you might want for legitimate reasons.\n\n### HTTP Strict Transport Security: hsts\n\n**Trying to prevent:** Users viewing your site on HTTP instead of HTTPS. HTTP is pretty insecure!\n\n**How to use Helmet to mitigate this:** This middleware adds the `Strict-Transport-Security` header to the response. This tells browsers, \"hey, only use HTTPS for the next period of time\". ([See the spec](http://tools.ietf.org/html/rfc6797) for more.)\n\nThis will set the Strict Transport Security header, telling browsers to visit by HTTPS for the next ninety days:\n\n```javascript\nvar ninetyDaysInMilliseconds = 7776000000;\napp.use(helmet.hsts({ maxAge: ninetyDaysInMilliseconds }))\n```\n\nYou can also include subdomains. If this is set on *example.com*, supported browsers will also use HTTPS on *my-subdomain.example.com*. Here's how you do that:\n\n```javascript\napp.use(helmet.hsts({\n  maxAge: 123000,\n  includeSubdomains: true\n}))\n```\n\nChrome lets you submit your site for baked-into-Chrome HSTS by adding `preload` to the header. You can add that with the following code, and then submit your site to the Chrome team at [hstspreload.appspot.com](https://hstspreload.appspot.com/).\n\n```javascript\napp.use(helmet.hsts({\n  maxAge: 10886400000,     // Must be at least 18 weeks to be approved by Google\n  includeSubdomains: true, // Must be enabled to be approved by Google\n  preload: true\n}))\n```\n\nThis'll be set if `req.secure` is true, a boolean auto-populated by Express. If you're not using Express, that value won't necessarily be set, so you have two options:\n\n```javascript\n// Set the header based on silly conditions\napp.use(helmet.hsts({\n  maxAge: 1234000,\n  setIf: function(req, res) {\n    return Math.random() < 0.5;\n  }\n}));\n\n// ALWAYS set the header\napp.use(helmet.hsts({\n  maxAge: 1234000,\n  force: true\n}))\n```\n\nNote that the max age is in milliseconds, even though the spec uses seconds. This middleware will round to the nearest full second.\n\n**Limitations:** This only works if your site actually has HTTPS. It won't tell users on HTTP to *switch* to HTTPS, it will just tell HTTPS users to stick around. You can enforce this with the [express-enforces-ssl](https://github.com/aredo/express-enforces-ssl) module. It's [somewhat well-supported by browsers](http://caniuse.com/#feat=stricttransportsecurity).\n\n### Hide the Referer header: referrerPolicy\n\nThe [Referer HTTP header](https://en.wikipedia.org/wiki/HTTP_referer) is typically set by web browsers to tell the server where it's coming from. For example, if you click a link on *example.com/index.html* that takes you to *wikipedia.org*, Wikipedia's servers will see `Referer: example.com`. This can have privacy implications—websites can see where you are coming from. The new [`Referrer-Policy` HTTP header](https://www.w3.org/TR/referrer-policy/#referrer-policy-header) lets authors control how browsers set the Referer header.\n\n[Read the spec](https://www.w3.org/TR/referrer-policy/#referrer-policies) to see the options you can provide.\n\nUsage:\n\n```js\napp.use(helmet.referrerPolicy({ policy: 'same-origin' }))\n// Referrer-Policy: same-origin\n\napp.use(helmet.referrerPolicy({ policy: 'unsafe-url' }))\n// Referrer-Policy: unsafe-url\n\napp.use(helmet.referrerPolicy())\n// Referrer-Policy: no-referrer\n```\n\n### Hide X-Powered-By: hidePoweredBy\n\n**Trying to prevent:** Hackers can exploit known vulnerabilities in Express/Node if they see that your site is powered by Express (or whichever framework you use). `X-Powered-By: Express` is sent in every HTTP request coming from Express by default. Disabling this won't provide much security benefit ([as discussed here](https://github.com/strongloop/express/pull/2813#issuecomment-159270428)), but might help a tiny bit. It will also improve performance by reducing the number of bytes sent.\n\n**How to use Helmet to mitigate this:** The `hidePoweredBy` middleware will remove the `X-Powered-By` header if it is set (which it will be by default in Express).\n\n```javascript\napp.use(helmet.hidePoweredBy())\n```\n\nYou can also explicitly set the header to something else, if you want. This could throw people off:\n\n```javascript\napp.use(helmet.hidePoweredBy({ setTo: 'PHP 4.2.0' }))\n```\n\nNote: if you're using Express, you can skip Helmet's middleware if you want:\n\n```javascript\napp.disable('x-powered-by')\n```\n\n**Limitations:** There might be other telltale signs that your site is Express-based (a blog post about your tech stack, for example). And if a hacker wants to hack your site, they could try Express (even if they're not sure that's what your site is built on).\n\n### Internet Explorer, restrict untrusted HTML: ieNoOpen\n\n**Trying to prevent:** Some web applications will serve untrusted HTML for download. By default, some versions of Internet Explorer will allow you to open those HTML files *in the context of your site*, which means that an untrusted HTML page could start doing bad things in the context of your pages. For more, see [this MSDN blog post](http://blogs.msdn.com/b/ie/archive/2008/07/02/ie8-security-part-v-comprehensive-protection.aspx).\n\n**How to use Helmet to mitigate this:** Set the `X-Download-Options` header to `noopen` to prevent IE users from executing downloads in your site's context.\n\n```javascript\napp.use(helmet.ieNoOpen())\n```\n\n**Limitations:** This is pretty obscure, fixing a small bug on IE only. No real drawbacks other than performance/bandwidth of setting the headers, though.\n\n### Don't infer the MIME type: noSniff\n\n**Trying to prevent:** Some browsers will try to \"sniff\" mimetypes. For example, if my server serves *file.txt* with a *text/plain* content-type, some browsers can still run that file with `<script src=\"file.txt\"></script>`. Many browsers will allow *file.js* to be run even if the content-type isn't for JavaScript. There are [some other vulnerabilities](http://miki.it/blog/2014/7/8/abusing-jsonp-with-rosetta-flash/), too.\n\n**How to use Helmet to mitigate this:** Use Helmet's `noSniff` middleware to keep Chrome, Opera, and IE from doing this sniffing ([and Firefox soon](https://bugzilla.mozilla.org/show_bug.cgi?id=471020)). The following example sets the `X-Content-Type-Options` header to its only option, `nosniff`:\n\n```javascript\napp.use(helmet.noSniff())\n```\n\n[MSDN has a good description](http://msdn.microsoft.com/en-us/library/gg622941%28v=vs.85%29.aspx) of how browsers behave when this header is sent.\n\n**Limitations:** This only prevents against a certain kind of attack.\n\n### Turn off caching: noCache\n\n**Trying to prevent:** Users caching your old, buggy resources. It's possible that you've got bugs in an old HTML or JavaScript file, and with a cache, some users will be stuck with those old versions.\n\n**How to use Helmet to mitigate this:** Use Helmet to disable this kind of caching. This sets a number of HTTP headers that stop caching.\n\n```javascript\napp.use(helmet.noCache())\n```\n\nThis sets four headers, disabling a lot of browser caching:\n\n- `Cache-Control: no-store, no-cache, must-revalidate, proxy-revalidate`\n- `Pragma: no-cache`\n- `Expires: 0`\n- `Surrogate-Control: no-store`\n\n**Limitations:** Caching has performance benefits, and you lose them here. It's also possible that you'll introduce new bugs and you'll wish people had old resources cached, but that's less likely.\n\n### Public Key Pinning: hpkp\n\n**Trying to prevent:** HTTPS certificates can be forged, allowing man-in-the middle attacks. [HTTP Public Key Pinning](https://developer.mozilla.org/en-US/docs/Web/Security/Public_Key_Pinning) aims to help that.\n\n**How to use Helmet to mitigate this:** Pass the \"Public-Key-Pins\" header to better assert your SSL certificates. [See the spec](https://tools.ietf.org/html/draft-ietf-websec-key-pinning-21) for more.\n\n```javascript\nvar ninetyDaysInMilliseconds = 7776000000;\napp.use(helmet.hpkp({\n  maxAge: ninetyDaysInMilliseconds,\n  sha256s: ['AbCdEf123=', 'ZyXwVu456='],\n  includeSubdomains: true,         // optional\n  reportUri: 'http://example.com'  // optional\n  reportOnly: false,               // optional\n\n  // Set the header based on a condition.\n  // This is optional.\n  setIf: function (req, res) {\n    return req.secure\n  }\n}))\n```\n\nSetting `reportOnly` to `true` will change the header from `Public-Key-Pins` to `Public-Key-Pins-Report-Only`.\n\n**Limitations:** Don't let these get out of sync with your certs!\n\n### Prevent DNS prefetching: dnsPrefetchControl\n\n**Trying to prevent:** Some browsers can start doing DNS lookups of other domains before visiting those domains. This can improve performance but can worsen security. [Mozilla Developer Network](https://developer.mozilla.org/en-US/docs/Web/HTTP/Controlling_DNS_prefetching) describes how browsers do this prefetching. [Chromium's documentation](https://dev.chromium.org/developers/design-documents/dns-prefetching) describes some ways that DNS lookups can be abused.\n\n**How to use Helmet to mitigate this:** Browsers will listen for the `X-DNS-Prefetch-Control` header and will disable DNS prefetching if the header is set to `off`.\n\n```js\n// Disable DNS prefetching (these two lines are equivalent):\napp.use(helmet.dnsPrefetchControl())\napp.use(helmet.dnsPrefetchControl({ allow: false }))\n\n// Enable DNS prefetching (less secure but faster):\napp.use(helmet.dnsPrefetchControl({ allow: true }))\n```\n\n**Limitations:** This hurts performance—browsers will no longer prefetch resources from your site.\n\nOther recommended modules\n-------------------------\n\nHelmet only deals with HTTP headers, but there are a number of other helpful security modules for Express. We haven't heavily audited these—that's what the [Node Security Project](https://nodesecurity.io/) is for—but take a look at some of these modules!\n\n* [express-enforces-ssl](https://github.com/aredo/express-enforces-ssl)\n* [express-content-length-validator](https://github.com/ericmdantas/express-content-length-validator)\n* [hpp](https://www.npmjs.com/package/hpp)\n* [cors](https://www.npmjs.org/package/cors)\n\nThis module has also been ported to other environments.\n\n* Koa Node web framework: [koa-helmet](https://github.com/venables/koa-helmet)\n* Crystal programming language: [crystal-helmet](https://github.com/EvanHahn/crystal-helmet)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/helmetjs/helmet.git"
  },
  "scripts": {
    "pretest": "standard",
    "test": "mocha"
  },
  "standard": {
    "globals": [
      "describe",
      "it",
      "beforeEach",
      "afterEach"
    ]
  },
  "version": "2.3.0"
}
