{
  "_args": [
    [
      {
        "raw": "webfinger@0.4.x",
        "scope": null,
        "escapedName": "webfinger",
        "name": "webfinger",
        "rawSpec": "0.4.x",
        "spec": ">=0.4.0 <0.5.0",
        "type": "range"
      },
      "/Users/NamNguyen1/Desktop/INFO30005/FitFamOz/node_modules/passport-openidconnect"
    ]
  ],
  "_from": "webfinger@>=0.4.0 <0.5.0",
  "_id": "webfinger@0.4.2",
  "_inCache": true,
  "_location": "/webfinger",
  "_npmUser": {
    "name": "evanp",
    "email": "evan@e14n.com"
  },
  "_npmVersion": "1.3.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "webfinger@0.4.x",
    "scope": null,
    "escapedName": "webfinger",
    "name": "webfinger",
    "rawSpec": "0.4.x",
    "spec": ">=0.4.0 <0.5.0",
    "type": "range"
  },
  "_requiredBy": [
    "/passport-openidconnect"
  ],
  "_resolved": "https://registry.npmjs.org/webfinger/-/webfinger-0.4.2.tgz",
  "_shasum": "3477a6d97799461896039fcffc650b73468ee76d",
  "_shrinkwrap": null,
  "_spec": "webfinger@0.4.x",
  "_where": "/Users/NamNguyen1/Desktop/INFO30005/FitFamOz/node_modules/passport-openidconnect",
  "author": {
    "name": "Evan Prodromou",
    "email": "evan@e14n.com"
  },
  "bugs": {
    "url": "https://github.com/e14n/webfinger/issues"
  },
  "dependencies": {
    "step": "0.0.x",
    "xml2js": "0.1.x"
  },
  "description": "Client library for Host Meta (RFC 6415) and Webfinger",
  "devDependencies": {
    "express": "3.0.x",
    "vows": "0.7.x"
  },
  "directories": {
    "lib": "./lib/"
  },
  "dist": {
    "shasum": "3477a6d97799461896039fcffc650b73468ee76d",
    "tarball": "https://registry.npmjs.org/webfinger/-/webfinger-0.4.2.tgz"
  },
  "engines": {
    "node": ">=0.8.x"
  },
  "homepage": "http://github.com/e14n/webfinger",
  "keywords": [
    "webfinger",
    "hostmeta",
    "discovery",
    "xrd",
    "jrd",
    "lrdd"
  ],
  "licenses": [
    {
      "type": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  ],
  "main": "./lib/webfinger.js",
  "maintainers": [
    {
      "name": "evanp",
      "email": "evan@status.net"
    }
  ],
  "name": "webfinger",
  "optionalDependencies": {},
  "readme": "# Webfinger\n\nWebfinger and host-meta client library for Node.js.\n\nIt supports:\n\n* XRD documents\n* JRD documents\n* host-meta\n* host-meta.json\n* http and https\n* RFC 6415 and the upcoming Webfinger RFC (up to draft 09)\n\n## License\n\nCopyright 2012,2013 E14N https://e14n.com/\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n## API\n\n### webfinger(address, callback)\n\nGets link data for the address `address` and returns it to function `callback`.\n\nThe `address` argument can be any kind of URL that node.js recognizes;\nacct: and http: and https: URLs are the most likely to work.\n\n`callback` should take two arguments: `err` for an error, and `jrd`\nfor a JRD representation of the Webfinger data.\n\nNote that the data is returned in JRD format even if it's in XRD\nformat on the server.\n\nThis method will first try the `/.well-known/webfinger` endpoint; if\nthat doesn't work it will fall back to RFC 6415 discovery.\n\n### webfinger(address, rel, callback)\n\nAs above, but passes the `rel` parameter to the\n`/.well-known/webfinger` endpoint if it's truthy.\n\nThis is mostly advisory. Some servers will send all links back\nanyways; others don't support the webfinger endpoint, so when we\nfallback to RFC 6415 everything is returned.\n\nEven if you pass a `rel` argument, you should still filter the\nresults. (But future versions of this library may do it for you.)\n\n### webfinger(address, rel, options, callback)\n\nAs above, but you can use the `options` object to control\nbehaviour. Currently, the options are:\n\n* `httpsOnly`: boolean flag, default `false` for whether to only use\n  HTTPS for communicating with the server. When this is set, it won't\n  use Webfinger, host-meta or LRDD endpoints that aren't HTTPS, and won't\n  follow redirect requests to HTTP endpoints.\n* `webfingerOnly`: boolean flag, default `false` for whether to only use\n  the .well-known/webfinger endpoint. When this is set, it won't\n  use host-meta and LRDD endpoints as a fallback.\n\n### lrdd(address, callback)\n\nExplicitly use Host Metadata + LRDD lookup per RFC 6415 and avoid the\n/.well-known/webfinger endpoint. Use this if you know a host only\nsupports LRDD.\n\n### lrdd(address, options, callback)\n\nAs above, but with fine control of options. Options include:\n\n* `httpsOnly`: boolean flag, default `false` for whether to only use\n  HTTPS for communicating with the server. When this is set, it won't\n  use Webfinger, host-meta or LRDD endpoints that aren't HTTPS, and won't\n  follow redirect requests to HTTP endpoints.\n\n### hostmeta(address, callback)\n\nGets link data for the host at `address` and returns it to function `callback`.\n\n`callback` works just like with `webfinger()`.\n\n### hostmeta(address, options, callback)\n\nAs above, but you can use the `options` object to control\nbehaviour. Currently, the options are:\n\n* `httpsOnly`: boolean flag, default `false`, for whether to only use\n  HTTPS for communicating with the server. When this is set, it won't\n  use host-meta or host-meta.json endpoints that aren't HTTPS, and won't\n  follow redirect requests to HTTP endpoints.\n\n### discover(address, callback)\n\nGets link data for `address` and returns it to function `callback`.\n\nIf you've got an address and you don't want to bother figuring out if it's a \nwebfinger or a hostname, call this and we'll do it for you.\n\n`callback` works just like with `webfinger()`.\n\n## Testing\n\nThe tests set up servers that listen on ports 80 and 443. On most\nUnix-like systems, you have to be root to listen on ports below 1024 or whatever.\n\nSo, to run the unit tests, you have to go:\n\n    sudo npm test\n\nIt's probably not a good idea to sudo any script without thinking\nabout it pretty hard. I suggest that if you're doing development, you\ndo it in a virtual machine so you're not sudo'ing dangerous stuff on\nyour main computer.\n\n# Bugs\n\nBugs welcome, see:\n\n https://github.com/e14n/webfinger/issues\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/e14n/webfinger.git"
  },
  "scripts": {
    "test": "vows -i test/*-test.js"
  },
  "version": "0.4.2"
}
